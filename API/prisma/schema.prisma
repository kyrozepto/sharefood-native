generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model donations {
  donation_id      Int        @id @default(autoincrement())
  user_id          Int
  title            String     @db.VarChar(100)
  description      String?
  expiry_date      DateTime?  @db.Date
  location         String
  donation_status  String?    @db.VarChar(20)
  created_at       DateTime?  @default(now()) @db.Timestamp(6)
  donation_picture String?
  quantity_value   Decimal    @db.Decimal(10, 2)
  quantity_unit    String?    @db.VarChar(10)
  category         String?    @db.VarChar(50)
  users            users      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  ratings          ratings[]
  requests         requests[]
}

model notifications {
  notification_id Int       @id @default(autoincrement())
  user_id         Int
  type            String    @db.VarChar(50)
  title           String
  message         String
  data            Json?
  is_read         Boolean?  @default(false)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  is_deleted      Boolean?  @default(false)
  users           users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ratings {
  rating_id   Int       @id @default(autoincrement())
  donation_id Int
  user_id     Int
  rate        Decimal   @db.Decimal(2, 1)
  review      String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  donations   donations @relation(fields: [donation_id], references: [donation_id], onDelete: Cascade, onUpdate: NoAction)
  users       users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model requests {
  request_id     Int       @id @default(autoincrement())
  donation_id    Int
  user_id        Int
  pickup_time    DateTime? @db.Time(6)
  note           String?
  request_status String    @default("waiting") @db.VarChar(20)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  donations      donations @relation(fields: [donation_id], references: [donation_id], onDelete: Cascade, onUpdate: NoAction)
  users          users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  user_id         Int             @id @default(autoincrement())
  user_name       String          @db.VarChar(100)
  email           String          @unique @db.VarChar(100)
  password        String          @db.VarChar(255)
  user_type       String?         @db.VarChar(20)
  phone           String?         @db.VarChar(20)
  created_at      DateTime?       @default(now()) @db.Timestamp(6)
  profile_picture String?
  donations       donations[]
  notifications   notifications[]
  ratings         ratings[]
  requests        requests[]
}
